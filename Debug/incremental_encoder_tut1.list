
incremental_encoder_tut1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011e8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001380  08001380  00011380  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001390  08001390  00011390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001398  08001398  00011398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800139c  0800139c  0001139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080013a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b0  2000000c  080013ac  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000bc  080013ac  000200bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a5dc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000019bd  00000000  00000000  0002a618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000483a  00000000  00000000  0002bfd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000738  00000000  00000000  00030810  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008c0  00000000  00000000  00030f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003670  00000000  00000000  00031808  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002d0c  00000000  00000000  00034e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00037b84  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000014d4  00000000  00000000  00037c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001368 	.word	0x08001368

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001368 	.word	0x08001368

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_InitTick+0x40>)
{
 80004ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fa:	6810      	ldr	r0, [r2, #0]
 80004fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000500:	f000 f888 	bl	8000614 <HAL_SYSTICK_Config>
 8000504:	4604      	mov	r4, r0
 8000506:	b958      	cbnz	r0, 8000520 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000508:	2d0f      	cmp	r5, #15
 800050a:	d809      	bhi.n	8000520 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	4602      	mov	r2, r0
 800050e:	4629      	mov	r1, r5
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f000 f84a 	bl	80005ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_InitTick+0x44>)
 800051a:	4620      	mov	r0, r4
 800051c:	601d      	str	r5, [r3, #0]
 800051e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000008 	.word	0x20000008
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_Init+0x30>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f81b 	bl	8000588 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ffc8 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000558:	f000 fdec 	bl	8001134 <HAL_MspInit>
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd08      	pop	{r3, pc}
 8000560:	40023c00 	.word	0x40023c00

08000564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x10>)
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x14>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	440b      	add	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000034 	.word	0x20000034
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <HAL_GetTick+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000034 	.word	0x20000034

08000588 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800058a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000590:	041b      	lsls	r3, r3, #16
 8000592:	0c1b      	lsrs	r3, r3, #16
 8000594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000598:	0200      	lsls	r0, r0, #8
 800059a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005a2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005a4:	60d3      	str	r3, [r2, #12]
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	68dc      	ldr	r4, [r3, #12]
 80005b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	2b04      	cmp	r3, #4
 80005be:	bf28      	it	cs
 80005c0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	f04f 0501 	mov.w	r5, #1
 80005c8:	fa05 f303 	lsl.w	r3, r5, r3
 80005cc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d0:	bf8c      	ite	hi
 80005d2:	3c03      	subhi	r4, #3
 80005d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d6:	4019      	ands	r1, r3
 80005d8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005da:	fa05 f404 	lsl.w	r4, r5, r4
 80005de:	3c01      	subs	r4, #1
 80005e0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e4:	ea42 0201 	orr.w	r2, r2, r1
 80005e8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	bfad      	iteet	ge
 80005ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	f000 000f 	andlt.w	r0, r0, #15
 80005f6:	4b06      	ldrlt	r3, [pc, #24]	; (8000610 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	bfb5      	itete	lt
 80005fe:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00
 8000610:	e000ed14 	.word	0xe000ed14

08000614 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000614:	3801      	subs	r0, #1
 8000616:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800061a:	d20a      	bcs.n	8000632 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000620:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	21f0      	movs	r1, #240	; 0xf0
 8000624:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800062c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000632:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000e010 	.word	0xe000e010
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000644:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000646:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000648:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80007d8 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800064c:	4a60      	ldr	r2, [pc, #384]	; (80007d0 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800064e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000650:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000654:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000656:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000658:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800065c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800065e:	42ac      	cmp	r4, r5
 8000660:	f040 80a6 	bne.w	80007b0 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000664:	684c      	ldr	r4, [r1, #4]
 8000666:	f024 0c10 	bic.w	ip, r4, #16
 800066a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800066e:	2e01      	cmp	r6, #1
 8000670:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000674:	d812      	bhi.n	800069c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000676:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000678:	2603      	movs	r6, #3
 800067a:	fa06 f60e 	lsl.w	r6, r6, lr
 800067e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000682:	68ce      	ldr	r6, [r1, #12]
 8000684:	fa06 f60e 	lsl.w	r6, r6, lr
 8000688:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800068a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800068c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800068e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000692:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000696:	409e      	lsls	r6, r3
 8000698:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800069a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800069c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800069e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006a0:	fa06 f60e 	lsl.w	r6, r6, lr
 80006a4:	43f6      	mvns	r6, r6
 80006a6:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006aa:	688f      	ldr	r7, [r1, #8]
 80006ac:	fa07 f70e 	lsl.w	r7, r7, lr
 80006b0:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006b4:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80006b8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006ba:	d116      	bne.n	80006ea <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80006bc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006c0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006c4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006c8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006cc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006d0:	f04f 0c0f 	mov.w	ip, #15
 80006d4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006d8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006dc:	690f      	ldr	r7, [r1, #16]
 80006de:	fa07 f70b 	lsl.w	r7, r7, fp
 80006e2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006e6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80006ea:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006ec:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ee:	f004 0703 	and.w	r7, r4, #3
 80006f2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80006f6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80006fa:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006fc:	00e6      	lsls	r6, r4, #3
 80006fe:	d557      	bpl.n	80007b0 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000700:	f04f 0b00 	mov.w	fp, #0
 8000704:	f8cd b00c 	str.w	fp, [sp, #12]
 8000708:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800070c:	4e31      	ldr	r6, [pc, #196]	; (80007d4 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000712:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000716:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800071a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800071e:	9703      	str	r7, [sp, #12]
 8000720:	9f03      	ldr	r7, [sp, #12]
 8000722:	f023 0703 	bic.w	r7, r3, #3
 8000726:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800072a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800072e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000732:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000736:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800073a:	f04f 0e0f 	mov.w	lr, #15
 800073e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000742:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000744:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000748:	d039      	beq.n	80007be <HAL_GPIO_Init+0x17e>
 800074a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800074e:	42b0      	cmp	r0, r6
 8000750:	d037      	beq.n	80007c2 <HAL_GPIO_Init+0x182>
 8000752:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000756:	42b0      	cmp	r0, r6
 8000758:	d035      	beq.n	80007c6 <HAL_GPIO_Init+0x186>
 800075a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800075e:	42b0      	cmp	r0, r6
 8000760:	d033      	beq.n	80007ca <HAL_GPIO_Init+0x18a>
 8000762:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000766:	42b0      	cmp	r0, r6
 8000768:	bf14      	ite	ne
 800076a:	2607      	movne	r6, #7
 800076c:	2604      	moveq	r6, #4
 800076e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000772:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000776:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000778:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800077a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800077c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000780:	bf0c      	ite	eq
 8000782:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000784:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000786:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000788:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800078a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800078e:	bf0c      	ite	eq
 8000790:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000792:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000794:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000796:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000798:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800079c:	bf0c      	ite	eq
 800079e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007a0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80007a2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80007a4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007a6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007a8:	bf54      	ite	pl
 80007aa:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80007ac:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80007ae:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007b0:	3301      	adds	r3, #1
 80007b2:	2b10      	cmp	r3, #16
 80007b4:	f47f af4f 	bne.w	8000656 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007b8:	b005      	add	sp, #20
 80007ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007be:	465e      	mov	r6, fp
 80007c0:	e7d5      	b.n	800076e <HAL_GPIO_Init+0x12e>
 80007c2:	2601      	movs	r6, #1
 80007c4:	e7d3      	b.n	800076e <HAL_GPIO_Init+0x12e>
 80007c6:	2602      	movs	r6, #2
 80007c8:	e7d1      	b.n	800076e <HAL_GPIO_Init+0x12e>
 80007ca:	2603      	movs	r6, #3
 80007cc:	e7cf      	b.n	800076e <HAL_GPIO_Init+0x12e>
 80007ce:	bf00      	nop
 80007d0:	40013c00 	.word	0x40013c00
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007dc:	b10a      	cbz	r2, 80007e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007de:	6181      	str	r1, [r0, #24]
 80007e0:	4770      	bx	lr
 80007e2:	0409      	lsls	r1, r1, #16
 80007e4:	e7fb      	b.n	80007de <HAL_GPIO_WritePin+0x2>
	...

080007e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007ec:	4604      	mov	r4, r0
 80007ee:	b908      	cbnz	r0, 80007f4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80007f0:	2001      	movs	r0, #1
 80007f2:	e03f      	b.n	8000874 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007f4:	6803      	ldr	r3, [r0, #0]
 80007f6:	07dd      	lsls	r5, r3, #31
 80007f8:	d410      	bmi.n	800081c <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	0798      	lsls	r0, r3, #30
 80007fe:	d45a      	bmi.n	80008b6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	071a      	lsls	r2, r3, #28
 8000804:	f100 809c 	bmi.w	8000940 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	075b      	lsls	r3, r3, #29
 800080c:	f100 80ba 	bmi.w	8000984 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000810:	69a0      	ldr	r0, [r4, #24]
 8000812:	2800      	cmp	r0, #0
 8000814:	f040 811b 	bne.w	8000a4e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000818:	2000      	movs	r0, #0
 800081a:	e02b      	b.n	8000874 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800081c:	4ba4      	ldr	r3, [pc, #656]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	f002 020c 	and.w	r2, r2, #12
 8000824:	2a04      	cmp	r2, #4
 8000826:	d007      	beq.n	8000838 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800082e:	2a08      	cmp	r2, #8
 8000830:	d10a      	bne.n	8000848 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	0259      	lsls	r1, r3, #9
 8000836:	d507      	bpl.n	8000848 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000838:	4b9d      	ldr	r3, [pc, #628]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	039a      	lsls	r2, r3, #14
 800083e:	d5dc      	bpl.n	80007fa <HAL_RCC_OscConfig+0x12>
 8000840:	6863      	ldr	r3, [r4, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1d9      	bne.n	80007fa <HAL_RCC_OscConfig+0x12>
 8000846:	e7d3      	b.n	80007f0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000848:	6863      	ldr	r3, [r4, #4]
 800084a:	4d99      	ldr	r5, [pc, #612]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 800084c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000850:	d113      	bne.n	800087a <HAL_RCC_OscConfig+0x92>
 8000852:	682b      	ldr	r3, [r5, #0]
 8000854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000858:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800085a:	f7ff fe8f 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800085e:	4d94      	ldr	r5, [pc, #592]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000860:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000862:	682b      	ldr	r3, [r5, #0]
 8000864:	039b      	lsls	r3, r3, #14
 8000866:	d4c8      	bmi.n	80007fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000868:	f7ff fe88 	bl	800057c <HAL_GetTick>
 800086c:	1b80      	subs	r0, r0, r6
 800086e:	2864      	cmp	r0, #100	; 0x64
 8000870:	d9f7      	bls.n	8000862 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000872:	2003      	movs	r0, #3
}
 8000874:	b002      	add	sp, #8
 8000876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800087a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800087e:	d104      	bne.n	800088a <HAL_RCC_OscConfig+0xa2>
 8000880:	682b      	ldr	r3, [r5, #0]
 8000882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000886:	602b      	str	r3, [r5, #0]
 8000888:	e7e3      	b.n	8000852 <HAL_RCC_OscConfig+0x6a>
 800088a:	682a      	ldr	r2, [r5, #0]
 800088c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000890:	602a      	str	r2, [r5, #0]
 8000892:	682a      	ldr	r2, [r5, #0]
 8000894:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000898:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1dd      	bne.n	800085a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800089e:	f7ff fe6d 	bl	800057c <HAL_GetTick>
 80008a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a4:	682b      	ldr	r3, [r5, #0]
 80008a6:	039f      	lsls	r7, r3, #14
 80008a8:	d5a7      	bpl.n	80007fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008aa:	f7ff fe67 	bl	800057c <HAL_GetTick>
 80008ae:	1b80      	subs	r0, r0, r6
 80008b0:	2864      	cmp	r0, #100	; 0x64
 80008b2:	d9f7      	bls.n	80008a4 <HAL_RCC_OscConfig+0xbc>
 80008b4:	e7dd      	b.n	8000872 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008b6:	4b7e      	ldr	r3, [pc, #504]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	f012 0f0c 	tst.w	r2, #12
 80008be:	d007      	beq.n	80008d0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008c0:	689a      	ldr	r2, [r3, #8]
 80008c2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008c6:	2a08      	cmp	r2, #8
 80008c8:	d111      	bne.n	80008ee <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	025e      	lsls	r6, r3, #9
 80008ce:	d40e      	bmi.n	80008ee <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008d0:	4b77      	ldr	r3, [pc, #476]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	0795      	lsls	r5, r2, #30
 80008d6:	d502      	bpl.n	80008de <HAL_RCC_OscConfig+0xf6>
 80008d8:	68e2      	ldr	r2, [r4, #12]
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d188      	bne.n	80007f0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	6921      	ldr	r1, [r4, #16]
 80008e2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008e6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80008ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ec:	e788      	b.n	8000800 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008ee:	68e2      	ldr	r2, [r4, #12]
 80008f0:	4b70      	ldr	r3, [pc, #448]	; (8000ab4 <HAL_RCC_OscConfig+0x2cc>)
 80008f2:	b1b2      	cbz	r2, 8000922 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f8:	f7ff fe40 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008fc:	4d6c      	ldr	r5, [pc, #432]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80008fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000900:	682b      	ldr	r3, [r5, #0]
 8000902:	0798      	lsls	r0, r3, #30
 8000904:	d507      	bpl.n	8000916 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000906:	682b      	ldr	r3, [r5, #0]
 8000908:	6922      	ldr	r2, [r4, #16]
 800090a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800090e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000912:	602b      	str	r3, [r5, #0]
 8000914:	e774      	b.n	8000800 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000916:	f7ff fe31 	bl	800057c <HAL_GetTick>
 800091a:	1b80      	subs	r0, r0, r6
 800091c:	2802      	cmp	r0, #2
 800091e:	d9ef      	bls.n	8000900 <HAL_RCC_OscConfig+0x118>
 8000920:	e7a7      	b.n	8000872 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000922:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000924:	f7ff fe2a 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000928:	4d61      	ldr	r5, [pc, #388]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800092a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800092c:	682b      	ldr	r3, [r5, #0]
 800092e:	0799      	lsls	r1, r3, #30
 8000930:	f57f af66 	bpl.w	8000800 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000934:	f7ff fe22 	bl	800057c <HAL_GetTick>
 8000938:	1b80      	subs	r0, r0, r6
 800093a:	2802      	cmp	r0, #2
 800093c:	d9f6      	bls.n	800092c <HAL_RCC_OscConfig+0x144>
 800093e:	e798      	b.n	8000872 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000940:	6962      	ldr	r2, [r4, #20]
 8000942:	4b5d      	ldr	r3, [pc, #372]	; (8000ab8 <HAL_RCC_OscConfig+0x2d0>)
 8000944:	b17a      	cbz	r2, 8000966 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800094a:	f7ff fe17 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800094e:	4d58      	ldr	r5, [pc, #352]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000950:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000952:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000954:	079f      	lsls	r7, r3, #30
 8000956:	f53f af57 	bmi.w	8000808 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800095a:	f7ff fe0f 	bl	800057c <HAL_GetTick>
 800095e:	1b80      	subs	r0, r0, r6
 8000960:	2802      	cmp	r0, #2
 8000962:	d9f6      	bls.n	8000952 <HAL_RCC_OscConfig+0x16a>
 8000964:	e785      	b.n	8000872 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000966:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000968:	f7ff fe08 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800096c:	4d50      	ldr	r5, [pc, #320]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800096e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000970:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000972:	0798      	lsls	r0, r3, #30
 8000974:	f57f af48 	bpl.w	8000808 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000978:	f7ff fe00 	bl	800057c <HAL_GetTick>
 800097c:	1b80      	subs	r0, r0, r6
 800097e:	2802      	cmp	r0, #2
 8000980:	d9f6      	bls.n	8000970 <HAL_RCC_OscConfig+0x188>
 8000982:	e776      	b.n	8000872 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000984:	4b4a      	ldr	r3, [pc, #296]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000988:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800098c:	d128      	bne.n	80009e0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	9201      	str	r2, [sp, #4]
 8000990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000992:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000996:	641a      	str	r2, [r3, #64]	; 0x40
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009a2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009a4:	4d45      	ldr	r5, [pc, #276]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 80009a6:	682b      	ldr	r3, [r5, #0]
 80009a8:	05d9      	lsls	r1, r3, #23
 80009aa:	d51b      	bpl.n	80009e4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ac:	68a3      	ldr	r3, [r4, #8]
 80009ae:	4d40      	ldr	r5, [pc, #256]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d127      	bne.n	8000a04 <HAL_RCC_OscConfig+0x21c>
 80009b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009bc:	f7ff fdde 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009c0:	4d3b      	ldr	r5, [pc, #236]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009c2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009c4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009ca:	079b      	lsls	r3, r3, #30
 80009cc:	d539      	bpl.n	8000a42 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	f43f af1e 	beq.w	8000810 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009d4:	4a36      	ldr	r2, [pc, #216]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80009d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	e717      	b.n	8000810 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80009e0:	2600      	movs	r6, #0
 80009e2:	e7df      	b.n	80009a4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009ec:	f7ff fdc6 	bl	800057c <HAL_GetTick>
 80009f0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f2:	682b      	ldr	r3, [r5, #0]
 80009f4:	05da      	lsls	r2, r3, #23
 80009f6:	d4d9      	bmi.n	80009ac <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009f8:	f7ff fdc0 	bl	800057c <HAL_GetTick>
 80009fc:	1bc0      	subs	r0, r0, r7
 80009fe:	2802      	cmp	r0, #2
 8000a00:	d9f7      	bls.n	80009f2 <HAL_RCC_OscConfig+0x20a>
 8000a02:	e736      	b.n	8000872 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a04:	2b05      	cmp	r3, #5
 8000a06:	d104      	bne.n	8000a12 <HAL_RCC_OscConfig+0x22a>
 8000a08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	672b      	str	r3, [r5, #112]	; 0x70
 8000a10:	e7d0      	b.n	80009b4 <HAL_RCC_OscConfig+0x1cc>
 8000a12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a14:	f022 0201 	bic.w	r2, r2, #1
 8000a18:	672a      	str	r2, [r5, #112]	; 0x70
 8000a1a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a1c:	f022 0204 	bic.w	r2, r2, #4
 8000a20:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1ca      	bne.n	80009bc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a26:	f7ff fda9 	bl	800057c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a2a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a2e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a32:	0798      	lsls	r0, r3, #30
 8000a34:	d5cb      	bpl.n	80009ce <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a36:	f7ff fda1 	bl	800057c <HAL_GetTick>
 8000a3a:	1bc0      	subs	r0, r0, r7
 8000a3c:	4540      	cmp	r0, r8
 8000a3e:	d9f7      	bls.n	8000a30 <HAL_RCC_OscConfig+0x248>
 8000a40:	e717      	b.n	8000872 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a42:	f7ff fd9b 	bl	800057c <HAL_GetTick>
 8000a46:	1bc0      	subs	r0, r0, r7
 8000a48:	4540      	cmp	r0, r8
 8000a4a:	d9bd      	bls.n	80009c8 <HAL_RCC_OscConfig+0x1e0>
 8000a4c:	e711      	b.n	8000872 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a4e:	4d18      	ldr	r5, [pc, #96]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000a50:	68ab      	ldr	r3, [r5, #8]
 8000a52:	f003 030c 	and.w	r3, r3, #12
 8000a56:	2b08      	cmp	r3, #8
 8000a58:	d047      	beq.n	8000aea <HAL_RCC_OscConfig+0x302>
 8000a5a:	4e19      	ldr	r6, [pc, #100]	; (8000ac0 <HAL_RCC_OscConfig+0x2d8>)
 8000a5c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a5e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000a60:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a62:	d135      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a64:	f7ff fd8a 	bl	800057c <HAL_GetTick>
 8000a68:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a6a:	682b      	ldr	r3, [r5, #0]
 8000a6c:	0199      	lsls	r1, r3, #6
 8000a6e:	d429      	bmi.n	8000ac4 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a70:	6a22      	ldr	r2, [r4, #32]
 8000a72:	69e3      	ldr	r3, [r4, #28]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a78:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a84:	4c0a      	ldr	r4, [pc, #40]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a86:	0852      	lsrs	r2, r2, #1
 8000a88:	3a01      	subs	r2, #1
 8000a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a8e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a90:	2301      	movs	r3, #1
 8000a92:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a94:	f7ff fd72 	bl	800057c <HAL_GetTick>
 8000a98:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	019a      	lsls	r2, r3, #6
 8000a9e:	f53f aebb 	bmi.w	8000818 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aa2:	f7ff fd6b 	bl	800057c <HAL_GetTick>
 8000aa6:	1b40      	subs	r0, r0, r5
 8000aa8:	2802      	cmp	r0, #2
 8000aaa:	d9f6      	bls.n	8000a9a <HAL_RCC_OscConfig+0x2b2>
 8000aac:	e6e1      	b.n	8000872 <HAL_RCC_OscConfig+0x8a>
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	42470000 	.word	0x42470000
 8000ab8:	42470e80 	.word	0x42470e80
 8000abc:	40007000 	.word	0x40007000
 8000ac0:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ac4:	f7ff fd5a 	bl	800057c <HAL_GetTick>
 8000ac8:	1bc0      	subs	r0, r0, r7
 8000aca:	2802      	cmp	r0, #2
 8000acc:	d9cd      	bls.n	8000a6a <HAL_RCC_OscConfig+0x282>
 8000ace:	e6d0      	b.n	8000872 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fd54 	bl	800057c <HAL_GetTick>
 8000ad4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ad6:	682b      	ldr	r3, [r5, #0]
 8000ad8:	019b      	lsls	r3, r3, #6
 8000ada:	f57f ae9d 	bpl.w	8000818 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ade:	f7ff fd4d 	bl	800057c <HAL_GetTick>
 8000ae2:	1b00      	subs	r0, r0, r4
 8000ae4:	2802      	cmp	r0, #2
 8000ae6:	d9f6      	bls.n	8000ad6 <HAL_RCC_OscConfig+0x2ee>
 8000ae8:	e6c3      	b.n	8000872 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000aea:	2801      	cmp	r0, #1
 8000aec:	f43f aec2 	beq.w	8000874 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8000af0:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000af2:	69e3      	ldr	r3, [r4, #28]
 8000af4:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f47f ae79 	bne.w	80007f0 <HAL_RCC_OscConfig+0x8>
 8000afe:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b00:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b04:	4293      	cmp	r3, r2
 8000b06:	f47f ae73 	bne.w	80007f0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b10:	4003      	ands	r3, r0
 8000b12:	4293      	cmp	r3, r2
 8000b14:	f47f ae6c 	bne.w	80007f0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b1a:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	f47f ae66 	bne.w	80007f0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000b26:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000b2a:	1ac0      	subs	r0, r0, r3
 8000b2c:	bf18      	it	ne
 8000b2e:	2001      	movne	r0, #1
 8000b30:	e6a0      	b.n	8000874 <HAL_RCC_OscConfig+0x8c>
 8000b32:	bf00      	nop

08000b34 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b34:	4913      	ldr	r1, [pc, #76]	; (8000b84 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b36:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b38:	688b      	ldr	r3, [r1, #8]
 8000b3a:	f003 030c 	and.w	r3, r3, #12
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d003      	beq.n	8000b4a <HAL_RCC_GetSysClockFreq+0x16>
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d003      	beq.n	8000b4e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b46:	4810      	ldr	r0, [pc, #64]	; (8000b88 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b48:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b4a:	4810      	ldr	r0, [pc, #64]	; (8000b8c <HAL_RCC_GetSysClockFreq+0x58>)
 8000b4c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b4e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b50:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b52:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b54:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b58:	bf14      	ite	ne
 8000b5a:	480c      	ldrne	r0, [pc, #48]	; (8000b8c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b5c:	480a      	ldreq	r0, [pc, #40]	; (8000b88 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b5e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b62:	bf18      	it	ne
 8000b64:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b6a:	fba1 0100 	umull	r0, r1, r1, r0
 8000b6e:	f7ff fb33 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b82:	bd08      	pop	{r3, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	00f42400 	.word	0x00f42400
 8000b8c:	007a1200 	.word	0x007a1200

08000b90 <HAL_RCC_ClockConfig>:
{
 8000b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b94:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b96:	4604      	mov	r4, r0
 8000b98:	b910      	cbnz	r0, 8000ba0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ba0:	4b44      	ldr	r3, [pc, #272]	; (8000cb4 <HAL_RCC_ClockConfig+0x124>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	f002 020f 	and.w	r2, r2, #15
 8000ba8:	428a      	cmp	r2, r1
 8000baa:	d329      	bcc.n	8000c00 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bac:	6821      	ldr	r1, [r4, #0]
 8000bae:	078f      	lsls	r7, r1, #30
 8000bb0:	d42e      	bmi.n	8000c10 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bb2:	07c8      	lsls	r0, r1, #31
 8000bb4:	d441      	bmi.n	8000c3a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bb6:	4b3f      	ldr	r3, [pc, #252]	; (8000cb4 <HAL_RCC_ClockConfig+0x124>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	f002 020f 	and.w	r2, r2, #15
 8000bbe:	4295      	cmp	r5, r2
 8000bc0:	d367      	bcc.n	8000c92 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bc2:	6822      	ldr	r2, [r4, #0]
 8000bc4:	0751      	lsls	r1, r2, #29
 8000bc6:	d46d      	bmi.n	8000ca4 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bc8:	0713      	lsls	r3, r2, #28
 8000bca:	d507      	bpl.n	8000bdc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bcc:	4a3a      	ldr	r2, [pc, #232]	; (8000cb8 <HAL_RCC_ClockConfig+0x128>)
 8000bce:	6921      	ldr	r1, [r4, #16]
 8000bd0:	6893      	ldr	r3, [r2, #8]
 8000bd2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bd6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bda:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bdc:	f7ff ffaa 	bl	8000b34 <HAL_RCC_GetSysClockFreq>
 8000be0:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <HAL_RCC_ClockConfig+0x128>)
 8000be2:	4a36      	ldr	r2, [pc, #216]	; (8000cbc <HAL_RCC_ClockConfig+0x12c>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bea:	5cd3      	ldrb	r3, [r2, r3]
 8000bec:	40d8      	lsrs	r0, r3
 8000bee:	4b34      	ldr	r3, [pc, #208]	; (8000cc0 <HAL_RCC_ClockConfig+0x130>)
 8000bf0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000bf2:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <HAL_RCC_ClockConfig+0x134>)
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	f7ff fc77 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c00:	b2ca      	uxtb	r2, r1
 8000c02:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d1c5      	bne.n	8000b9a <HAL_RCC_ClockConfig+0xa>
 8000c0e:	e7cd      	b.n	8000bac <HAL_RCC_ClockConfig+0x1c>
 8000c10:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c12:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c16:	bf1e      	ittt	ne
 8000c18:	689a      	ldrne	r2, [r3, #8]
 8000c1a:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c1e:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c20:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c22:	bf42      	ittt	mi
 8000c24:	689a      	ldrmi	r2, [r3, #8]
 8000c26:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c2a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	68a0      	ldr	r0, [r4, #8]
 8000c30:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c34:	4302      	orrs	r2, r0
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	e7bb      	b.n	8000bb2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c3a:	6862      	ldr	r2, [r4, #4]
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <HAL_RCC_ClockConfig+0x128>)
 8000c3e:	2a01      	cmp	r2, #1
 8000c40:	d11d      	bne.n	8000c7e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c48:	d0a7      	beq.n	8000b9a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c4a:	4e1b      	ldr	r6, [pc, #108]	; (8000cb8 <HAL_RCC_ClockConfig+0x128>)
 8000c4c:	68b3      	ldr	r3, [r6, #8]
 8000c4e:	f023 0303 	bic.w	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c56:	f7ff fc91 	bl	800057c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c5a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c5e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c60:	68b3      	ldr	r3, [r6, #8]
 8000c62:	6862      	ldr	r2, [r4, #4]
 8000c64:	f003 030c 	and.w	r3, r3, #12
 8000c68:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c6c:	d0a3      	beq.n	8000bb6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c6e:	f7ff fc85 	bl	800057c <HAL_GetTick>
 8000c72:	1bc0      	subs	r0, r0, r7
 8000c74:	4540      	cmp	r0, r8
 8000c76:	d9f3      	bls.n	8000c60 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000c78:	2003      	movs	r0, #3
}
 8000c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c7e:	1e91      	subs	r1, r2, #2
 8000c80:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c82:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c84:	d802      	bhi.n	8000c8c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c8a:	e7dd      	b.n	8000c48 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8c:	f013 0f02 	tst.w	r3, #2
 8000c90:	e7da      	b.n	8000c48 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c92:	b2ea      	uxtb	r2, r5
 8000c94:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 030f 	and.w	r3, r3, #15
 8000c9c:	429d      	cmp	r5, r3
 8000c9e:	f47f af7c 	bne.w	8000b9a <HAL_RCC_ClockConfig+0xa>
 8000ca2:	e78e      	b.n	8000bc2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ca4:	4904      	ldr	r1, [pc, #16]	; (8000cb8 <HAL_RCC_ClockConfig+0x128>)
 8000ca6:	68e0      	ldr	r0, [r4, #12]
 8000ca8:	688b      	ldr	r3, [r1, #8]
 8000caa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000cae:	4303      	orrs	r3, r0
 8000cb0:	608b      	str	r3, [r1, #8]
 8000cb2:	e789      	b.n	8000bc8 <HAL_RCC_ClockConfig+0x38>
 8000cb4:	40023c00 	.word	0x40023c00
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	08001380 	.word	0x08001380
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8000cc8:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8000cca:	b189      	cbz	r1, 8000cf0 <HAL_TIM_Encoder_Start+0x28>
 8000ccc:	2904      	cmp	r1, #4
 8000cce:	d007      	beq.n	8000ce0 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000cd0:	6a1a      	ldr	r2, [r3, #32]
 8000cd2:	f022 0201 	bic.w	r2, r2, #1
 8000cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000cd8:	6a1a      	ldr	r2, [r3, #32]
 8000cda:	f042 0201 	orr.w	r2, r2, #1
 8000cde:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8000ce0:	6a1a      	ldr	r2, [r3, #32]
 8000ce2:	f022 0210 	bic.w	r2, r2, #16
 8000ce6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000ce8:	6a1a      	ldr	r2, [r3, #32]
 8000cea:	f042 0210 	orr.w	r2, r2, #16
 8000cee:	e006      	b.n	8000cfe <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8000cf0:	6a1a      	ldr	r2, [r3, #32]
 8000cf2:	f022 0201 	bic.w	r2, r2, #1
 8000cf6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000cf8:	6a1a      	ldr	r2, [r3, #32]
 8000cfa:	f042 0201 	orr.w	r2, r2, #1
 8000cfe:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	f042 0201 	orr.w	r2, r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	2000      	movs	r0, #0
 8000d0a:	4770      	bx	lr

08000d0c <HAL_TIM_PeriodElapsedCallback>:
 8000d0c:	4770      	bx	lr

08000d0e <HAL_TIM_OC_DelayElapsedCallback>:
 8000d0e:	4770      	bx	lr

08000d10 <HAL_TIM_IC_CaptureCallback>:
 8000d10:	4770      	bx	lr

08000d12 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d12:	4770      	bx	lr

08000d14 <HAL_TIM_TriggerCallback>:
 8000d14:	4770      	bx	lr

08000d16 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d16:	6803      	ldr	r3, [r0, #0]
 8000d18:	691a      	ldr	r2, [r3, #16]
 8000d1a:	0791      	lsls	r1, r2, #30
{
 8000d1c:	b510      	push	{r4, lr}
 8000d1e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d20:	d50e      	bpl.n	8000d40 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	0792      	lsls	r2, r2, #30
 8000d26:	d50b      	bpl.n	8000d40 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d28:	f06f 0202 	mvn.w	r2, #2
 8000d2c:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d2e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d30:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d32:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d34:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d36:	d077      	beq.n	8000e28 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000d38:	f7ff ffea 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d40:	6823      	ldr	r3, [r4, #0]
 8000d42:	691a      	ldr	r2, [r3, #16]
 8000d44:	0750      	lsls	r0, r2, #29
 8000d46:	d510      	bpl.n	8000d6a <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	0751      	lsls	r1, r2, #29
 8000d4c:	d50d      	bpl.n	8000d6a <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d4e:	f06f 0204 	mvn.w	r2, #4
 8000d52:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d54:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d56:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d58:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d5c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8000d5e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d60:	d068      	beq.n	8000e34 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d62:	f7ff ffd5 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d66:	2300      	movs	r3, #0
 8000d68:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	0712      	lsls	r2, r2, #28
 8000d70:	d50f      	bpl.n	8000d92 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	0710      	lsls	r0, r2, #28
 8000d76:	d50c      	bpl.n	8000d92 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d78:	f06f 0208 	mvn.w	r2, #8
 8000d7c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d7e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d80:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d82:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d84:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8000d86:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d88:	d05a      	beq.n	8000e40 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d8a:	f7ff ffc1 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	691a      	ldr	r2, [r3, #16]
 8000d96:	06d2      	lsls	r2, r2, #27
 8000d98:	d510      	bpl.n	8000dbc <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	06d0      	lsls	r0, r2, #27
 8000d9e:	d50d      	bpl.n	8000dbc <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000da0:	f06f 0210 	mvn.w	r2, #16
 8000da4:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000da6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000da8:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000daa:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000dae:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8000db0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000db2:	d04b      	beq.n	8000e4c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000db4:	f7ff ffac 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000db8:	2300      	movs	r3, #0
 8000dba:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	07d1      	lsls	r1, r2, #31
 8000dc2:	d508      	bpl.n	8000dd6 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	07d2      	lsls	r2, r2, #31
 8000dc8:	d505      	bpl.n	8000dd6 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000dca:	f06f 0201 	mvn.w	r2, #1
 8000dce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f7ff ff9b 	bl	8000d0c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	0610      	lsls	r0, r2, #24
 8000ddc:	d508      	bpl.n	8000df0 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	0611      	lsls	r1, r2, #24
 8000de2:	d505      	bpl.n	8000df0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000de8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000dea:	4620      	mov	r0, r4
 8000dec:	f000 f90b 	bl	8001006 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000df0:	6823      	ldr	r3, [r4, #0]
 8000df2:	691a      	ldr	r2, [r3, #16]
 8000df4:	0652      	lsls	r2, r2, #25
 8000df6:	d508      	bpl.n	8000e0a <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	0650      	lsls	r0, r2, #25
 8000dfc:	d505      	bpl.n	8000e0a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000dfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e02:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000e04:	4620      	mov	r0, r4
 8000e06:	f7ff ff85 	bl	8000d14 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	0691      	lsls	r1, r2, #26
 8000e10:	d522      	bpl.n	8000e58 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	0692      	lsls	r2, r2, #26
 8000e16:	d51f      	bpl.n	8000e58 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e18:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8000e1c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e1e:	611a      	str	r2, [r3, #16]
}
 8000e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000e24:	f000 b8ee 	b.w	8001004 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e28:	f7ff ff71 	bl	8000d0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f7ff ff70 	bl	8000d12 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e32:	e783      	b.n	8000d3c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e34:	f7ff ff6b 	bl	8000d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff ff6a 	bl	8000d12 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e3e:	e792      	b.n	8000d66 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e40:	f7ff ff65 	bl	8000d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e44:	4620      	mov	r0, r4
 8000e46:	f7ff ff64 	bl	8000d12 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e4a:	e7a0      	b.n	8000d8e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e4c:	f7ff ff5f 	bl	8000d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e50:	4620      	mov	r0, r4
 8000e52:	f7ff ff5e 	bl	8000d12 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e56:	e7af      	b.n	8000db8 <HAL_TIM_IRQHandler+0xa2>
 8000e58:	bd10      	pop	{r4, pc}
	...

08000e5c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e5c:	4a24      	ldr	r2, [pc, #144]	; (8000ef0 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8000e5e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e60:	4290      	cmp	r0, r2
 8000e62:	d00e      	beq.n	8000e82 <TIM_Base_SetConfig+0x26>
 8000e64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e68:	d00b      	beq.n	8000e82 <TIM_Base_SetConfig+0x26>
 8000e6a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e6e:	4290      	cmp	r0, r2
 8000e70:	d007      	beq.n	8000e82 <TIM_Base_SetConfig+0x26>
 8000e72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e76:	4290      	cmp	r0, r2
 8000e78:	d003      	beq.n	8000e82 <TIM_Base_SetConfig+0x26>
 8000e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	d115      	bne.n	8000eae <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8000e82:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e88:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <TIM_Base_SetConfig+0x94>)
 8000e8c:	4290      	cmp	r0, r2
 8000e8e:	d019      	beq.n	8000ec4 <TIM_Base_SetConfig+0x68>
 8000e90:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e94:	d016      	beq.n	8000ec4 <TIM_Base_SetConfig+0x68>
 8000e96:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e9a:	4290      	cmp	r0, r2
 8000e9c:	d012      	beq.n	8000ec4 <TIM_Base_SetConfig+0x68>
 8000e9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ea2:	4290      	cmp	r0, r2
 8000ea4:	d00e      	beq.n	8000ec4 <TIM_Base_SetConfig+0x68>
 8000ea6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eaa:	4290      	cmp	r0, r2
 8000eac:	d00a      	beq.n	8000ec4 <TIM_Base_SetConfig+0x68>
 8000eae:	4a11      	ldr	r2, [pc, #68]	; (8000ef4 <TIM_Base_SetConfig+0x98>)
 8000eb0:	4290      	cmp	r0, r2
 8000eb2:	d007      	beq.n	8000ec4 <TIM_Base_SetConfig+0x68>
 8000eb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eb8:	4290      	cmp	r0, r2
 8000eba:	d003      	beq.n	8000ec4 <TIM_Base_SetConfig+0x68>
 8000ebc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ec0:	4290      	cmp	r0, r2
 8000ec2:	d103      	bne.n	8000ecc <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ec4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000eca:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000ecc:	694a      	ldr	r2, [r1, #20]
 8000ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ed2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000ed4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ed6:	688b      	ldr	r3, [r1, #8]
 8000ed8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8000eda:	680b      	ldr	r3, [r1, #0]
 8000edc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <TIM_Base_SetConfig+0x94>)
 8000ee0:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000ee2:	bf04      	itt	eq
 8000ee4:	690b      	ldreq	r3, [r1, #16]
 8000ee6:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	6143      	str	r3, [r0, #20]
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40010000 	.word	0x40010000
 8000ef4:	40014000 	.word	0x40014000

08000ef8 <HAL_TIM_Encoder_Init>:
{
 8000ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efa:	460c      	mov	r4, r1
  if (htim == NULL)
 8000efc:	4605      	mov	r5, r0
 8000efe:	2800      	cmp	r0, #0
 8000f00:	d043      	beq.n	8000f8a <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000f02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f0a:	b91b      	cbnz	r3, 8000f14 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8000f0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8000f10:	f000 f99e 	bl	8001250 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8000f14:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8000f16:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8000f18:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8000f1c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8000f20:	6883      	ldr	r3, [r0, #8]
 8000f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f26:	f023 0307 	bic.w	r3, r3, #7
 8000f2a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f2c:	f7ff ff96 	bl	8000e5c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8000f30:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8000f32:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8000f34:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8000f36:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8000f38:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8000f3a:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8000f3c:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8000f3e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8000f40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f44:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8000f48:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8000f4c:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8000f4e:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8000f52:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8000f54:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000f5c:	68e1      	ldr	r1, [r4, #12]
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8000f62:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8000f66:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8000f6a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8000f6c:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8000f6e:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8000f72:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8000f74:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8000f76:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8000f7a:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8000f7c:	4317      	orrs	r7, r2
  htim->State = HAL_TIM_STATE_READY;
 8000f7e:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8000f80:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 8000f82:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8000f86:	2000      	movs	r0, #0
 8000f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
}
 8000f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f90 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000f90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000f94:	2b01      	cmp	r3, #1
{
 8000f96:	b530      	push	{r4, r5, lr}
 8000f98:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000f9c:	d02d      	beq.n	8000ffa <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000fa2:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000fa4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8000fa6:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000fa8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8000fac:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000fae:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8000fb0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000fb4:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000fb6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000fb8:	4c11      	ldr	r4, [pc, #68]	; (8001000 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8000fba:	42a3      	cmp	r3, r4
 8000fbc:	d012      	beq.n	8000fe4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8000fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc2:	d00f      	beq.n	8000fe4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8000fc4:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8000fc8:	42a3      	cmp	r3, r4
 8000fca:	d00b      	beq.n	8000fe4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8000fcc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000fd0:	42a3      	cmp	r3, r4
 8000fd2:	d007      	beq.n	8000fe4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8000fd4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000fd8:	42a3      	cmp	r3, r4
 8000fda:	d003      	beq.n	8000fe4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8000fdc:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8000fe0:	42a3      	cmp	r3, r4
 8000fe2:	d104      	bne.n	8000fee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000fe4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8000fe6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000fea:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8000fec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000ffa:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000ffc:	bd30      	pop	{r4, r5, pc}
 8000ffe:	bf00      	nop
 8001000:	40010000 	.word	0x40010000

08001004 <HAL_TIMEx_CommutCallback>:
 8001004:	4770      	bx	lr

08001006 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001006:	4770      	bx	lr

08001008 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001008:	b530      	push	{r4, r5, lr}
 800100a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	2214      	movs	r2, #20
 800100e:	2100      	movs	r1, #0
 8001010:	a803      	add	r0, sp, #12
 8001012:	f000 f9a1 	bl	8001358 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001016:	2400      	movs	r4, #0
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_GPIO_Init+0x64>)
 800101a:	9401      	str	r4, [sp, #4]
 800101c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800101e:	4d14      	ldr	r5, [pc, #80]	; (8001070 <MX_GPIO_Init+0x68>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001020:	f042 0210 	orr.w	r2, r2, #16
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
 8001026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001028:	f002 0210 	and.w	r2, r2, #16
 800102c:	9201      	str	r2, [sp, #4]
 800102e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001030:	9402      	str	r4, [sp, #8]
 8001032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001034:	f042 0208 	orr.w	r2, r2, #8
 8001038:	631a      	str	r2, [r3, #48]	; 0x30
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001042:	4622      	mov	r2, r4
 8001044:	4628      	mov	r0, r5
 8001046:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800104c:	f7ff fbc6 	bl	80007dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001050:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001054:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001056:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105a:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001062:	f7ff faed 	bl	8000640 <HAL_GPIO_Init>

}
 8001066:	b009      	add	sp, #36	; 0x24
 8001068:	bd30      	pop	{r4, r5, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40020c00 	.word	0x40020c00

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b510      	push	{r4, lr}
 8001076:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001078:	2230      	movs	r2, #48	; 0x30
 800107a:	2100      	movs	r1, #0
 800107c:	a808      	add	r0, sp, #32
 800107e:	f000 f96b 	bl	8001358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001082:	2100      	movs	r1, #0
 8001084:	2214      	movs	r2, #20
 8001086:	a803      	add	r0, sp, #12
 8001088:	f000 f966 	bl	8001358 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2400      	movs	r4, #0
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <SystemClock_Config+0x74>)
 8001090:	9401      	str	r4, [sp, #4]
 8001092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001094:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001098:	641a      	str	r2, [r3, #64]	; 0x40
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <SystemClock_Config+0x78>)
 80010a6:	9402      	str	r4, [sp, #8]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b2:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b8:	9302      	str	r3, [sp, #8]
 80010ba:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010bc:	2302      	movs	r3, #2
 80010be:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c0:	2301      	movs	r3, #1
 80010c2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c6:	2310      	movs	r3, #16
 80010c8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ca:	f7ff fb8d 	bl	80007e8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ce:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d0:	4621      	mov	r1, r4
 80010d2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010d6:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010da:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010dc:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010de:	f7ff fd57 	bl	8000b90 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80010e2:	b014      	add	sp, #80	; 0x50
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <main>:
HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80010f0:	4c0c      	ldr	r4, [pc, #48]	; (8001124 <main+0x34>)
{
 80010f2:	b508      	push	{r3, lr}
  HAL_Init();
 80010f4:	f7ff fa1c 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 80010f8:	f7ff ffbc 	bl	8001074 <SystemClock_Config>
  MX_GPIO_Init();
 80010fc:	f7ff ff84 	bl	8001008 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001100:	f000 f876 	bl	80011f0 <MX_TIM1_Init>
HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001104:	213c      	movs	r1, #60	; 0x3c
 8001106:	4620      	mov	r0, r4
 8001108:	f7ff fdde 	bl	8000cc8 <HAL_TIM_Encoder_Start>
	  tim1_cnt = htim1.Instance->CNT;
 800110c:	6822      	ldr	r2, [r4, #0]
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <main+0x38>)
	  direction = !(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1));
 8001110:	4906      	ldr	r1, [pc, #24]	; (800112c <main+0x3c>)
	  tim1_cnt = htim1.Instance->CNT;
 8001112:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001114:	6003      	str	r3, [r0, #0]
	  direction = !(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1));
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	f083 0310 	eor.w	r3, r3, #16
 800111c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001120:	600b      	str	r3, [r1, #0]
 8001122:	e7f6      	b.n	8001112 <main+0x22>
 8001124:	2000007c 	.word	0x2000007c
 8001128:	20000030 	.word	0x20000030
 800112c:	20000038 	.word	0x20000038

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	4770      	bx	lr
	...

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_MspInit+0x3c>)
 8001138:	2100      	movs	r1, #0
 800113a:	9100      	str	r1, [sp, #0]
 800113c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800113e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001142:	645a      	str	r2, [r3, #68]	; 0x44
 8001144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001146:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800114a:	9200      	str	r2, [sp, #0]
 800114c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	9101      	str	r1, [sp, #4]
 8001150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001152:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001156:	641a      	str	r2, [r3, #64]	; 0x40
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001160:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001164:	f7ff fa10 	bl	8000588 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001168:	b003      	add	sp, #12
 800116a:	f85d fb04 	ldr.w	pc, [sp], #4
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800

08001174 <NMI_Handler>:
 8001174:	4770      	bx	lr

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	e7fe      	b.n	800117a <BusFault_Handler>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler>

0800117e <SVC_Handler>:
 800117e:	4770      	bx	lr

08001180 <DebugMon_Handler>:
 8001180:	4770      	bx	lr

08001182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001184:	f7ff b9ee 	b.w	8000564 <HAL_IncTick>

08001188 <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */
   rise = htim3.Instance->CCR1;
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <TIM3_IRQHandler+0x3c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <TIM3_IRQHandler+0x40>)
 8001190:	601a      	str	r2, [r3, #0]
   if(rise!=0){
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	b192      	cbz	r2, 80011bc <TIM3_IRQHandler+0x34>
	   //rise is in us
	   //freq in Mhz
	   freq = 1/(float)rise;
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <TIM3_IRQHandler+0x44>)
 800119c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011a8:	ed83 7a00 	vstr	s14, [r3]
	   // freq in khz
	   freq = 1000*freq;
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80011d0 <TIM3_IRQHandler+0x48>
 80011b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b8:	edc3 7a00 	vstr	s15, [r3]
   }
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011bc:	4801      	ldr	r0, [pc, #4]	; (80011c4 <TIM3_IRQHandler+0x3c>)
 80011be:	f7ff bdaa 	b.w	8000d16 <HAL_TIM_IRQHandler>
 80011c2:	bf00      	nop
 80011c4:	2000003c 	.word	0x2000003c
 80011c8:	2000002c 	.word	0x2000002c
 80011cc:	20000028 	.word	0x20000028
 80011d0:	447a0000 	.word	0x447a0000

080011d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SystemInit+0x18>)
 80011d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80011da:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80011de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011f0:	b510      	push	{r4, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 80011f4:	2224      	movs	r2, #36	; 0x24
 80011f6:	2100      	movs	r1, #0
 80011f8:	a803      	add	r0, sp, #12
 80011fa:	f000 f8ad 	bl	8001358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
 80011fe:	4812      	ldr	r0, [pc, #72]	; (8001248 <MX_TIM1_Init+0x58>)
  htim1.Init.Prescaler = 63;
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_TIM1_Init+0x5c>)
 8001202:	233f      	movs	r3, #63	; 0x3f
 8001204:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff;
 8001208:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	2400      	movs	r4, #0
  htim1.Init.Period = 0xffff;
 800120e:	60c3      	str	r3, [r0, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001210:	a903      	add	r1, sp, #12
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001212:	2301      	movs	r3, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	9401      	str	r4, [sp, #4]
 8001216:	9402      	str	r4, [sp, #8]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800121c:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	6184      	str	r4, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001220:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001222:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001224:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001226:	f7ff fe67 	bl	8000ef8 <HAL_TIM_Encoder_Init>
 800122a:	b108      	cbz	r0, 8001230 <MX_TIM1_Init+0x40>
  {
    Error_Handler();
 800122c:	f7ff ff80 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8001230:	2330      	movs	r3, #48	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001232:	a901      	add	r1, sp, #4
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_TIM1_Init+0x58>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8001236:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800123a:	f7ff fea9 	bl	8000f90 <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	b108      	cbz	r0, 8001244 <MX_TIM1_Init+0x54>
  {
    Error_Handler();
 8001240:	f7ff ff76 	bl	8001130 <Error_Handler>
  }

}
 8001244:	b00c      	add	sp, #48	; 0x30
 8001246:	bd10      	pop	{r4, pc}
 8001248:	2000007c 	.word	0x2000007c
 800124c:	40010000 	.word	0x40010000

08001250 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001250:	b510      	push	{r4, lr}
 8001252:	4604      	mov	r4, r0
 8001254:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	2214      	movs	r2, #20
 8001258:	2100      	movs	r1, #0
 800125a:	a803      	add	r0, sp, #12
 800125c:	f000 f87c 	bl	8001358 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8001260:	6822      	ldr	r2, [r4, #0]
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_TIM_Encoder_MspInit+0x64>)
 8001264:	429a      	cmp	r2, r3
 8001266:	d122      	bne.n	80012ae <HAL_TIM_Encoder_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001268:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800126c:	2100      	movs	r1, #0
 800126e:	9101      	str	r1, [sp, #4]
 8001270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001272:	4811      	ldr	r0, [pc, #68]	; (80012b8 <HAL_TIM_Encoder_MspInit+0x68>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001274:	f042 0201 	orr.w	r2, r2, #1
 8001278:	645a      	str	r2, [r3, #68]	; 0x44
 800127a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800127c:	f002 0201 	and.w	r2, r2, #1
 8001280:	9201      	str	r2, [sp, #4]
 8001282:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001284:	9102      	str	r1, [sp, #8]
 8001286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001288:	f042 0210 	orr.w	r2, r2, #16
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001298:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800129c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012aa:	f7ff f9c9 	bl	8000640 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012ae:	b008      	add	sp, #32
 80012b0:	bd10      	pop	{r4, pc}
 80012b2:	bf00      	nop
 80012b4:	40010000 	.word	0x40010000
 80012b8:	40021000 	.word	0x40021000

080012bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012c2:	e003      	b.n	80012cc <LoopCopyDataInit>

080012c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ca:	3104      	adds	r1, #4

080012cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012d4:	d3f6      	bcc.n	80012c4 <CopyDataInit>
  ldr  r2, =_sbss
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012d8:	e002      	b.n	80012e0 <LoopFillZerobss>

080012da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012dc:	f842 3b04 	str.w	r3, [r2], #4

080012e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012e4:	d3f9      	bcc.n	80012da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012e6:	f7ff ff75 	bl	80011d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f000 f811 	bl	8001310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ee:	f7ff feff 	bl	80010f0 <main>
  bx  lr    
 80012f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012f8:	080013a0 	.word	0x080013a0
  ldr  r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001300:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001304:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001308:	200000bc 	.word	0x200000bc

0800130c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC_IRQHandler>
	...

08001310 <__libc_init_array>:
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	4e0d      	ldr	r6, [pc, #52]	; (8001348 <__libc_init_array+0x38>)
 8001314:	4c0d      	ldr	r4, [pc, #52]	; (800134c <__libc_init_array+0x3c>)
 8001316:	1ba4      	subs	r4, r4, r6
 8001318:	10a4      	asrs	r4, r4, #2
 800131a:	2500      	movs	r5, #0
 800131c:	42a5      	cmp	r5, r4
 800131e:	d109      	bne.n	8001334 <__libc_init_array+0x24>
 8001320:	4e0b      	ldr	r6, [pc, #44]	; (8001350 <__libc_init_array+0x40>)
 8001322:	4c0c      	ldr	r4, [pc, #48]	; (8001354 <__libc_init_array+0x44>)
 8001324:	f000 f820 	bl	8001368 <_init>
 8001328:	1ba4      	subs	r4, r4, r6
 800132a:	10a4      	asrs	r4, r4, #2
 800132c:	2500      	movs	r5, #0
 800132e:	42a5      	cmp	r5, r4
 8001330:	d105      	bne.n	800133e <__libc_init_array+0x2e>
 8001332:	bd70      	pop	{r4, r5, r6, pc}
 8001334:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001338:	4798      	blx	r3
 800133a:	3501      	adds	r5, #1
 800133c:	e7ee      	b.n	800131c <__libc_init_array+0xc>
 800133e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001342:	4798      	blx	r3
 8001344:	3501      	adds	r5, #1
 8001346:	e7f2      	b.n	800132e <__libc_init_array+0x1e>
 8001348:	08001398 	.word	0x08001398
 800134c:	08001398 	.word	0x08001398
 8001350:	08001398 	.word	0x08001398
 8001354:	0800139c 	.word	0x0800139c

08001358 <memset>:
 8001358:	4402      	add	r2, r0
 800135a:	4603      	mov	r3, r0
 800135c:	4293      	cmp	r3, r2
 800135e:	d100      	bne.n	8001362 <memset+0xa>
 8001360:	4770      	bx	lr
 8001362:	f803 1b01 	strb.w	r1, [r3], #1
 8001366:	e7f9      	b.n	800135c <memset+0x4>

08001368 <_init>:
 8001368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800136a:	bf00      	nop
 800136c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800136e:	bc08      	pop	{r3}
 8001370:	469e      	mov	lr, r3
 8001372:	4770      	bx	lr

08001374 <_fini>:
 8001374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001376:	bf00      	nop
 8001378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800137a:	bc08      	pop	{r3}
 800137c:	469e      	mov	lr, r3
 800137e:	4770      	bx	lr
